name: Release Package

# mainブランチにマージされた時、または手動実行時に実行
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

# リリース処理に必要な権限
permissions:
  contents: write  # git push とリリース作成に必要
  id-token: write  # npm publish に必要

# 並行実行を防止（複数のリリースが同時実行されないように）
concurrency:
  group: release
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # コードをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # 全履歴を取得（リリースノート生成のため）

      # Node.js環境のセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'
          registry-url: 'https://registry.npmjs.org'

      # 依存関係のインストール
      - name: Install dependencies
        run: npm ci

      # スクリプトファイルの権限設定
      - name: Set script permissions
        run: |
          chmod +x scripts/*.mjs
          ls -la scripts/

      # TypeScriptの型チェック
      - name: TypeScript type check
        run: npm run type-check

      # Biomeでコード品質チェック
      - name: Code quality check
        run: npm run ci

      # Git設定（npm versionでのコミット用）
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # 現在のバージョンを取得
      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      # バージョンアップ（patch, minor, major）
      - name: Bump version
        id: version_bump
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          echo "Version type: $VERSION_TYPE"
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      # プロジェクトのビルド
      - name: Build project
        run: npm run build

      # ビルド結果の確認
      - name: Verify build output
        run: |
          if [ ! -f "dist/cli.js" ]; then
            echo "❌ Build failed: dist/cli.js not found"
            exit 1
          fi
          echo "✅ Build successful: dist/cli.js exists"

      # CHANGELOGを更新
      - name: Update CHANGELOG
        run: |
          echo "🔍 デバッグ: 現在のディレクトリとファイル確認"
          pwd
          ls -la
          echo "🔍 Node.js とnpmのバージョン確認"
          node --version
          npm --version
          echo "🔍 Git情報の確認"
          git log --oneline -10
          git tag --list | tail -5
          echo "🔍 conventional-changelogの直接テスト"
          npx conventional-changelog --help || echo "conventional-changelog not available"
          echo "🔍 CHANGELOGスクリプトの実行"
          npm run changelog:update || {
            echo "❌ CHANGELOG update failed"
            echo "🔍 エラー詳細の確認"
            ls -la scripts/
            cat scripts/generate-changelog.mjs
            echo "⚠️ CHANGELOG update failed, continuing..."
          }
          echo "✅ CHANGELOG.md update completed"

      # 変更をコミットしてプッシュ
      - name: Commit and push version bump
        run: |
          git add package.json src/version.ts
          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
            echo "✅ CHANGELOG.md added to commit"
          else
            echo "⚠️ CHANGELOG.md not found, skipping"
          fi
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }}"
          git push origin main

      # GitHub Releaseを作成
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version_bump.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          git tag "$NEW_VERSION"
          git push origin "$NEW_VERSION"
          gh release create "$NEW_VERSION" \
            --target main \
            --title "Release $NEW_VERSION" \
            --notes-start-tag "$CURRENT_VERSION" \
            --generate-notes

      # npmに公開
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
