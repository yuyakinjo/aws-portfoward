name: Tests and Coverage

on:
  push:

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [24.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Coverage Summary
        if: matrix.node-version == '24.x'
        run: |
          echo "## 📊 テストカバレッジレポート" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### カバレッジ結果" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.json | jq -r '.total | "Statements: \(.statements.pct)% (\(.statements.covered)/\(.statements.total))", "Branches: \(.branches.pct)% (\(.branches.covered)/\(.branches.total))", "Functions: \(.functions.pct)% (\(.functions.covered)/\(.functions.total))", "Lines: \(.lines.pct)% (\(.lines.covered)/\(.lines.total))"' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to artifacts
        if: matrix.node-version == '24.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.node-version == '24.x'
        run: |
          echo "✅ **全97テスト成功** - カバレッジレポートはArtifactsからダウンロードできます" > pr_comment.txt
          echo "📊 詳細なカバレッジ情報はワークフローのSummaryタブで確認できます" >> pr_comment.txt

  test-e2e:
    name: End-to-End CLI Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test CLI help commands
        run: |
          node dist/cli.js --help
          node dist/cli.js connect --help
          node dist/cli.js connect-ui --help
          node dist/cli.js exec-task --help
          node dist/cli.js exec-task-ui --help

      - name: Test CLI version
        run: node dist/cli.js --version

      - name: Test CLI error handling
        run: |
          # テスト: 無効なコマンド
          if node dist/cli.js invalid-command 2>/dev/null; then
            echo "Error: Should fail with invalid command"
            exit 1
          else
            echo "✅ Correctly failed with invalid command"
          fi

          # テスト: 無効なオプション
          if node dist/cli.js connect --invalid-option 2>/dev/null; then
            echo "Error: Should fail with invalid option"
            exit 1
          else
            echo "✅ Correctly failed with invalid option"
          fi

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, test-e2e]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.test-e2e.result }}" == "success" ]]; then
            echo "✅ All tests passed! Quality gate: PASSED"
          else
            echo "❌ Some tests failed. Quality gate: FAILED"
            echo "Unit/Integration tests: ${{ needs.test.result }}"
            echo "E2E tests: ${{ needs.test-e2e.result }}"
            exit 1
          fi

      - name: Quality summary
        run: |
          echo "## 🎯 Quality Gate Summary"
          echo "- Unit Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}"
          echo "- Integration Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}"
          echo "- E2E Tests: ${{ needs.test-e2e.result == 'success' && '✅ PASSED' || '❌ FAILED' }}"